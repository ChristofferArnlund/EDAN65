aspect Visitor {
	//Visit methods for concrete nodes
	public interface Visitor {
		public Object visit(List node, Object data);
		public Object visit(Opt node, Object data);
		public Object visit(Program node, Object data);
		public Object visit(StmtBlock node, Object data);
		public Object visit(Func node, Object data);
		public Object visit(IdDecl node, Object data);
		public Object visit(IdUse node, Object data);
		public Object visit(While node, Object data);
		public Object visit(If node, Object data);
		public Object visit(Return node, Object data);
		public Object visit(FuncCall node, Object data);
		public Object visit(FuncCallStmt node, Object data);
		public Object visit(Numeral node, Object data);
		public Object visit(Add node, Object data);
		public Object visit(Mul node, Object data);
		public Object visit(Sub node, Object data);
		public Object visit(Div node, Object data);
		public Object visit(Mod node, Object data);
		public Object visit(Equals node, Object data);
		public Object visit(Assign node, Object data);
		public Object visit(Not node, Object data);
		public Object visit(Leq node, Object data);
		public Object visit(Le node, Object data);
		public Object visit(Geq node, Object data);
		public Object visit(Ge node, Object data);
	}

	public Object ASTNode.accept(Visitor visitor, Object data) {
		throw new Error("Visitor: accept method not available for " + getClass().getName());
	}

	public Object Assign.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object List.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Opt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Program.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object StmtBlock.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Func.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object FuncCallStmt.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object IdDecl.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object IdUse.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object While.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object If.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Return.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object FuncCall.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Numeral.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Add.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Mul.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Sub.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Div.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Mod.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Equals.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Not.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Leq.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Le.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Geq.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}

	public Object Ge.accept(Visitor visitor, Object data) {
		return visitor.visit(this, data);
	}
}
