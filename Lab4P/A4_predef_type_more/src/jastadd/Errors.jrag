import java.util.Set;
import java.util.TreeSet;

aspect Errors {
	public class ErrorMessage implements Comparable<ErrorMessage> {
		protected final String message;
		protected final int lineNumber;
		public ErrorMessage(String message, int lineNumber) {
			this.message = message;
			this.lineNumber = lineNumber;
		}
		public int compareTo(ErrorMessage other) {
			if (lineNumber == other.lineNumber) {
				return message.compareTo(other.message);
			}
			return Integer.compare(lineNumber, other.lineNumber); 
		}
		public String toString() {
			return "Error at line " + lineNumber + ": " + message;
		}
	} 
	protected ErrorMessage ASTNode.error(String message) {
		return new ErrorMessage(message, getLine(getStart()));
	}

	coll Set<ErrorMessage> Program.errors() [new TreeSet<ErrorMessage>()] with add root Program;

	inh Program ASTNode.program();
	eq Program.getChild().program() = this;
}


aspect ErrorContributions {
	syn String IdDecl.typeString() = isVariable() ? "Variable" : "Function";
	
	IdUse contributes error("symbol '" + getID() + "' is not declared")
		when decl().isUnknown()
		to Program.errors() for program();

	IdUseExpr contributes error("Variable '" + getIdUse().getID() + " is circular!")
		when isCircular()
		to Program.errors() for program();

	FuncCall contributes error("Function call '" + getIdUse().getID() + "' does not point to function")
		when !getIdUse().decl().isFunction() && !getIdUse().decl().isUnknown()
		to Program.errors() for program();

	FuncCall contributes error("Wrong nbr of parameters supplied in calling " + getIdUse().getID())
		when wrongNbrCallParams()
		to Program.errors() for program();

	IdUseExpr contributes error("'" + getIdUse().getID() + "' is not a variable")
		when !getIdUse().decl().isVariable() && !getIdUse().decl().isUnknown()
		to Program.errors() for program();

	IdDecl contributes error("symbol '" + getID() + "' is already declared!")
		when isMultiplyDeclared()
		to Program.errors() for program();

	Expr contributes error("Expected type " + expectedType().getDesc() + " but found " + type().getDesc())
		when !compatibleType()
		to Program.errors() for program();
}
