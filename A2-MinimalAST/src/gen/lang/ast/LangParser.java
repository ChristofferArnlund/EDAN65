package lang.ast;

import beaver.*;
import java.util.ArrayList;

/**
 * This class is a LALR parser generated by
 * <a href="http://beaver.sourceforge.net">Beaver</a> v0.9.6.1
 * from the grammar specification "parser.beaver".
 */
public class LangParser extends Parser {
	static public class Terminals {
		static public final short EOF = 0;
		static public final short ID = 1;
		static public final short LPAR = 2;
		static public final short NUMERAL = 3;
		static public final short RBRA = 4;
		static public final short INT = 5;
		static public final short RPAR = 6;
		static public final short ADD = 7;
		static public final short SUB = 8;
		static public final short IF = 9;
		static public final short WHILE = 10;
		static public final short RETURN = 11;
		static public final short LBRA = 12;
		static public final short SEMICOLON = 13;
		static public final short COMMA = 14;
		static public final short MOD = 15;
		static public final short DIV = 16;
		static public final short MUL = 17;
		static public final short ELSE = 18;
		static public final short ASSIGN = 19;
		static public final short LE = 20;
		static public final short GE = 21;
		static public final short LEQ = 22;
		static public final short GEQ = 23;
		static public final short NOT = 24;
		static public final short EQUALS = 25;

		static public final String[] NAMES = {
			"EOF",
			"ID",
			"LPAR",
			"NUMERAL",
			"RBRA",
			"INT",
			"RPAR",
			"ADD",
			"SUB",
			"IF",
			"WHILE",
			"RETURN",
			"LBRA",
			"SEMICOLON",
			"COMMA",
			"MOD",
			"DIV",
			"MUL",
			"ELSE",
			"ASSIGN",
			"LE",
			"GE",
			"LEQ",
			"GEQ",
			"NOT",
			"EQUALS"
		};
	}

	static final ParsingTables PARSING_TABLES = new ParsingTables(
		"U9ojbTbp5KKKnh#vD$S6p89234iI0v6GdKi8Eo9BmYvX2mOLLy25$u0ggxIiidpG5vzyyk$" +
		"mnR9ANtoHHGJ28gA0uiA#1TVZRsQQt9cvarYLyjxw#llEwTDzkcTwJalUeBQfIjMQf8VrY2" +
		"PheYgqHCsQeoujq6DgI5YlgbmzPfgckMhHOfMfHtsQbvYbdrdYdgTBFC#MU5ufoJrBRQgCn" +
		"TIxl8rQfYVqf5PfJMpC#fYrEMRjZ5dFgvRLls4tD4KPPUqhRTT6xS5BLhkEDymKUeiZPqPq" +
		"QqGlZ#WL4RqoebT7TA$BT2EHgUXzN1rQME9DZqrRQzE8QjTifpeTX$7#yvslHSwtDB33dZ1" +
		"tgHvV#xgcwaLDLxToUabvrMYt7b8T$mdQfqSrGmMjqoOzfRNQe2tQgXqQr81swJazexrwWN" +
		"EtNw$fPLROn7h2tRJm$DiOMyUfQE2DDl9kubQENEqIk$RyTupTZgSpPPRnUUBPojbDFARTv" +
		"QrXZxKyWsayWx7MEvRbiVeEJcoEPzh15pUH9rY1ry$gUyDCeJSwyl$IwPcAtl0B7MjL$xNM" +
		"KlM0mtX$T7x4bm$ii2VCNQh7rtRH5fW$Zvr7UzITCcfGDRMeccfKXS#l6Vb0LzAN0Vb0#QX" +
		"YXrsCgkJa7NXRmUyWc15gRn5OZ9WCzy1lmajSt7i#ZmRYbe85JdVJrC45iD2D7op6KWkb3y" +
		"0xu7Fm6HYApwSBm1XV3ly5LqLohQRv0vwNM4C6J4bPMotD9$1q#0ku7Zu4DyAdu2Pu65xcu" +
		"fl1SgTxGIjO1LRW#1HU5vbx8#W0xCbRW#DBU0De0ttOn#3DBdOkMElqVB09SGxUudpzZWTA" +
		"zq3DaNOdzfNpsSpEH#8AoR5ZWR7N4tcw4lP1nqSSdqxql#NukEDpYVdlfUNbTpd5zwxZznr" +
		"$wFWZnnydujSdxFw8pgJClokYAn9zDH6z9sLiGr5xBQFiwK18zhSYF#FqsbMxOh$Ph$QB$M" +
		"oN0##5aNvEijsrEtO6$XwS1YVjc7tj#ZcXTiAEsA70kc$3Ti#6KCVji7rZHr7dmNU0isJVW" +
		"hFWzo3wXzXAVhHhCVkIuuj1#zE8$qzm2zoqs$OFZXwgkaTrzv6XnfU32TmYEL16nVEH3Uwo" +
		"JjY$Mme1meh5rmCyRYKV6MuYBnLpY9$DtCq1AhYlijnOPTmmsL7WKVsp3XxLEHk1Hpr#W6p" +
		"0zQ0ETFyBGNWoMW==");

	static public class SyntaxError extends RuntimeException { public SyntaxError(String msg) {super(msg);}}
	// Disable syntax error recovery
	protected void recoverFromError(Symbol token, TokenStream in) {
		throw new SyntaxError("Cannot recover from the syntax error");
	}

	private final Action[] actions;

	public LangParser() {
		super(PARSING_TABLES);
		actions = new Action[] {
			new Action() {	// [0] program = func_list.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					 return new Program(a);
				}
			},
			new Action() {	// [1] func_list = func.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Func a = (Func) _symbol_a.value;
					 return new List().add(a);
				}
			},
			new Action() {	// [2] func_list = func_list.a func.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Func b = (Func) _symbol_b.value;
					 return a.add(b);
				}
			},
			new Action() {	// [3] func = INT ID.id LPAR RPAR LBRA opt_stmt_list.b RBRA
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 2];
					final Symbol _symbol_b = _symbols[offset + 6];
					final List b = (List) _symbol_b.value;
					 return new Func(id, new List(),b);
				}
			},
			new Action() {	// [4] func = INT ID.id LPAR param_decl_list.a RPAR LBRA opt_stmt_list.b RBRA
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol id = _symbols[offset + 2];
					final Symbol _symbol_a = _symbols[offset + 4];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 7];
					final List b = (List) _symbol_b.value;
					 return new Func(id, a, b);
				}
			},
			new Action() {	// [5] funcCall = ID.a LPAR call_param_list.b RPAR SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 3];
					final List b = (List) _symbol_b.value;
					 return new FuncCall(a, b);
				}
			},
			new Action() {	// [6] funcCall = ID.a LPAR RPAR SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new FuncCall(a, new List());
				}
			},
			new Action() {	// [7] nestedFuncCall = ID.a LPAR call_param_list.b RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 3];
					final List b = (List) _symbol_b.value;
					 return new FuncCall(a, b);
				}
			},
			new Action() {	// [8] nestedFuncCall = ID.a LPAR RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new FuncCall(a, new List());
				}
			},
			new Action() {	// [9] call_param_list = call_param.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 System.out.println("Added call param to list"); return new List().add(a);
				}
			},
			new Action() {	// [10] call_param_list = call_param_list.a COMMA call_param.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 System.out.println("Added call param to list"); return a.add(b);
				}
			},
			new Action() {	// [11] call_param = expr.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					 System.out.println("Found call param"); return a;
				}
			},
			new Action() {	// [12] param_decl_list = param.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Name a = (Name) _symbol_a.value;
					 return new List().add(a);
				}
			},
			new Action() {	// [13] param_decl_list = param_decl_list.a COMMA param.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Name b = (Name) _symbol_b.value;
					 return a.add(b);
				}
			},
			new Action() {	// [14] param = INT ID.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					 return new Name(a);
				}
			},
			new Action() {	// [15] opt_stmt_list = 
				public Symbol reduce(Symbol[] _symbols, int offset) {
					 return new List();
				}
			},
			new Action() {	// [16] opt_stmt_list = stmt_list.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					 return a;
				}
			},
			new Action() {	// [17] stmt_list = stmt.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Stmt a = (Stmt) _symbol_a.value;
					 return new List().add(a);
				}
			},
			new Action() {	// [18] stmt_list = stmt_list.a stmt.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final List a = (List) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 2];
					final Stmt b = (Stmt) _symbol_b.value;
					 return a.add(b);
				}
			},
			Action.RETURN,	// [19] stmt = id_decl
			Action.RETURN,	// [20] stmt = id_use
			Action.RETURN,	// [21] stmt = whileStmt
			Action.RETURN,	// [22] stmt = ifStmt
			Action.RETURN,	// [23] stmt = return_stmt
			Action.RETURN,	// [24] stmt = funcCall
			new Action() {	// [25] return_stmt = RETURN expr.a SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 System.out.println("Did retr retr"); return new Return(a);
				}
			},
			new Action() {	// [26] whileStmt = WHILE LPAR expr.a RPAR LBRA opt_stmt_list.b RBRA
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final List b = (List) _symbol_b.value;
					 return new While(a, b);
				}
			},
			new Action() {	// [27] ifStmt = IF LPAR expr.a RPAR LBRA opt_stmt_list.b RBRA
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final List b = (List) _symbol_b.value;
					 return new If(a, b, new List());
				}
			},
			new Action() {	// [28] ifStmt = IF LPAR expr.a RPAR LBRA opt_stmt_list.b RBRA ELSE LBRA opt_stmt_list.c RBRA
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 3];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 6];
					final List b = (List) _symbol_b.value;
					final Symbol _symbol_c = _symbols[offset + 10];
					final List c = (List) _symbol_c.value;
					 return new If(a, b, c);
				}
			},
			new Action() {	// [29] id_decl = INT ID.a SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 2];
					  return new IdDecl(a);
				}
			},
			new Action() {	// [30] id_use = ID.a ASSIGN expr.b SEMICOLON
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					  return new IdUse(a, b);
				}
			},
			new Action() {	// [31] expr = num_expr.a LE num_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Le(a, b);
				}
			},
			new Action() {	// [32] expr = num_expr.a GE num_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Ge(a, b);
				}
			},
			new Action() {	// [33] expr = num_expr.a LEQ num_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Leq(a, b);
				}
			},
			new Action() {	// [34] expr = num_expr.a GEQ num_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Geq(a, b);
				}
			},
			new Action() {	// [35] expr = num_expr.a NOT num_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Not(a, b);
				}
			},
			new Action() {	// [36] expr = num_expr.a EQUALS num_expr.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Equals(a, b);
				}
			},
			Action.RETURN,	// [37] expr = num_expr
			new Action() {	// [38] num_expr = num_expr.a ADD term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Add(a, b);
				}
			},
			new Action() {	// [39] num_expr = num_expr.a SUB term.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Sub(a, b);
				}
			},
			Action.RETURN,	// [40] num_expr = term
			new Action() {	// [41] term = term.a MOD factor.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Mod(a, b);
				}
			},
			new Action() {	// [42] term = term.a DIV factor.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Div(a, b);
				}
			},
			new Action() {	// [43] term = term.a MUL factor.b
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 1];
					final Expr a = (Expr) _symbol_a.value;
					final Symbol _symbol_b = _symbols[offset + 3];
					final Expr b = (Expr) _symbol_b.value;
					 return new Mul(a, b);
				}
			},
			Action.RETURN,	// [44] term = factor
			Action.RETURN,	// [45] factor = id
			Action.RETURN,	// [46] factor = numeral
			new Action() {	// [47] factor = LPAR num_expr.a RPAR
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol _symbol_a = _symbols[offset + 2];
					final Expr a = (Expr) _symbol_a.value;
					 return a;
				}
			},
			Action.RETURN,	// [48] factor = nestedFuncCall
			new Action() {	// [49] numeral = NUMERAL.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Numeral(a);
				}
			},
			new Action() {	// [50] id = ID.a
				public Symbol reduce(Symbol[] _symbols, int offset) {
					final Symbol a = _symbols[offset + 1];
					 return new Name(a);
				}
			}
		};
	}

	protected Symbol invokeReduceAction(int rule_num, int offset) {
		return actions[rule_num].reduce(_symbols, offset);
	}
}
